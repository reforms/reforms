ПЛАНЫ, ПРОБЛЕММЫ, ФИШЕЧКИ и РЮШЕЧКИ:

1. Добавить возможность поддержки  транзакций на уровне интерфейсных методов с помощью аннотации Transaction

2. Добавить ПРАВИЛЬНУЮ логику установки NULL значений в объект. На мой взгляд, если значение равно NULL,
   setter метод у объект не должен вызываться или это поведение должно быть настраиваемое.
   Если же он вызывается, сделать проверку примитивов.

[+] 3. Добавить хук на вызов любых методов из интерфейсных DAO в конфигурацию, чтобы можно было реализововывать любые методы, какие пожелаешь.
       [+] Добавлен контракт IMethodInterceptor и методы в конфигурации для добавления/изменения/установки хука на DaoProxy

4. Проработать вопрос кеширования аннотируемых методов и их параметров в интерфейсных DAO. Класс DaoProxy

5. Добавить аннотации для bean фильтров: расширить для аннотации TargetFilter скоп @Target(ElementType.FIELD) и
   добавить поддержку этого в DaoProxy

6. Вносить изменения в документацию и доработать ее основными возможностями Readme.asciidoc

7. Глубоко проработать вопрос с идентификаторами при вставки объектов.
   Как правильно передать управление пользователю на генерацию id?
   Или каким образом сконфигурировать доступ к пользовательскому генератору объекта в SQL выражении?

8. Добавить метод copy во все реализации Expression и сделать кеш String -> Expression для быстрого доступа к Expression по запросу

9. Предоставить API для осуществления тестов DAO слоя:
        Тестирование корректности указания SQL-запросов
        Тестирование корректности меппинга колонок на орм
        Тестирование результатов работы конкретного SQL-запроса

[+] 10. DaoProxy добавить поддержку следующих типов данных при выборке:
       [+] - Iterator по объектам OrmIterator
       [+] - Массив объектов
       [+] - Обработчик объектов OrmHandler
       [+] - Указание любых Set
       [?] - Указание любых List - не только ArrayList - а вообще любых

11. ВАЖНО! Доработать SQL парсер на поддержку специфических конструкций. см Тест UTestSelectQueryParser

12. Рассмотреть возможность удалять связанную таблицу и ее колонки выборки, если указанные по ней динамические фильтры отсутствуют

[+] 13. Если в SQL-запросе осталась толька одна колонка и возвращаемый тип данных в методе это вовсе не ОРМ,
        то предусматреть и такую возможность: List<String> loadNames(); и List<Integer> loadStates и т.д.
        Частично реализовано в ResultSetSingleReader. Реализовано по типу, а не по кол-ву колонок.
        Если указать тип в аннотации TargetQuery для 'одиночных' значений, все будет ОК

14. Проработка вопроса с хранимыми процедурами:
     API - очень важно.
     [+] SQL - парсинг.

[+] 15. Проработка вопроса и ИДЕЙ, связанных с батчингом при вставке и обновлении.
        [+] - Добавлена поддержка batch в UPDATE запросе для списков, массивов
        [+] - Добавлена поддержка batch в INSERT запросе для списков, массивов

16. Проработать вопрос с ошибками. Сейчас все ошибки IllegalStateException, а нужен свой тип и классификатор.

17. Подготовка к публикациям в англоязычных ресурсах, плюс правки wiki

[+] 18. Автоматически определять тип SQL-запроса в DAO proxy
       [+] - SELECT
       [+] - INSERT
       [+] - UPDATE
       [+] - DELETE

19. Добавить поддержку типов в список допустимых при установки значений в PreparedStatement:
       - byte[]
       - InputStream
       - Reader
       [+] - проработать вопрос с EnumParamSetter. Сейчас не допускает null значения но должен. Сделал setObject(x, null);

[+] 20. Добавлена новыая аннотация TargetDao для указания орм объекта в ней
        [+] Теперь можно писать кратко в методах TargetQuery("SELECT 1"), если указать орм в TargetDao

21. Добавить java-doc для всех классов, помеченных аннотацией @TargetApi
