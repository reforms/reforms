////
License is free for everything
////
RefOrms
-------
Hello, its RefOrms framework.

What the project does:
~~~~~~~~~~~~~~~~~~~~~
[square]
* Project helps you *map* your *SQL* query to your *ORM* data.
* Project contains SQL-92 parser to *select*, *update*, *insert* and *delete queries*.

Why the project is useful:
~~~~~~~~~~~~~~~~~~~~~~~~~
[square]
* It's powerfull instrument which helps you to take all from *SQL* and map it to *ORM*.
* It's not hibernate, it's not DDL (like JOOQ) it's only *SQL* to *ORM*.

How users can get started with the project:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Download *reforms.jar* and include it to your project.

Concept of Usage as Best Practices:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[square]
* One dependency: *reforms.jar* for all needs
* One class *com.reforms.orm.OrmDao* for most of needs
* Usaging *annotated* code as *little* as possible
* *Simple*, but *powerfull sintaxes* for mapping selecting columns to orm fields
* *Reusable* sql query for *difference* filters

Short example:
~~~~~~~~~~~~~~
[source,java]
----
// Find client using id
private static final String FIND_CLIENT_QUERY = "SELECT id, name, state FROM clients WHERE id = ?";

public Client findClient(long clientId) throws Exception {
    // In constructor: ormDao = new com.reforms.orm.OrmDao(connection);
    return ormDao.select(Client.class, FIND_CLIENT_QUERY, clientId);
}
----

Job for You and Job for RefOrms:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[options="header,middle,autowidth"]
|===
| N | Task | Your job | RefOrms job | Example and Details
| 1 | ORM class | + | - | <<E1,_Clien.java_>>
| 2 | SQL query | + | - | _SELECT, INSERT, UPDATE, DELETE queries_
| 3 | DAO class | + | - | <<E4,_ClienDao.java_>>
| 3 | Setting values to PreparedStaement | - | + | _ps.setLong("id", 1L);_
| 4 | Reading values from ResultSet | - | + | _rs.getLong("id");_
| 5 | Map ResultSet to ORM class | - | + | _rs -> ORM_
|===

Full Example of usage
~~~~~~~~~~~~~~~~~~~~~
[[E1]]*1. Your ORM*
[source,java]
----
 package com.reforms.example;

 public class Client {

    private long id;

    private String name;

    private ClientState state;

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public ClientState getState() {
        return state;
    }

    public void setState(ClientState state) {
        this.state = state;
    }
}
----
*2. Your ENUM (part of orm)*
[source,java]
----
package com.reforms.example;

import com.reforms.ann.TargetField;
import com.reforms.ann.TargetMethod;

public enum ClientState {
    NEW(0),
    ACTIVE(1),
    BLOCKED(2);

    @TargetField
    private int state;

    private ClientState(int state) {
        this.state = state;
    }

    public int getState() {
        return state;
    }

    @TargetMethod
    public static ClientState getClientState(int state) {
        for (ClientState clientState : values()) {
            if (clientState.state == state) {
                return clientState;
            }
        }
        throw new IllegalStateException("Unknown client with state " + state);
    }
}
----
*3. Your ORM Handler (if need)*
[source,java]
----
package com.reforms.example;

import com.reforms.orm.dao.bobj.model.OrmHandler;

public class ClientHandler implements OrmHandler<Client> {

    private int index;

    @Override
    public void startHandle() {
        index = 0;
        System.out.println("beging...");
    }

    @Override
    public boolean handleOrm(Client dbClient) {
        index++;
        System.out.println("Load client: " + dbClient);
        return true;
    }

    @Override
    public void endHandle() {
        System.out.println("end... Total: " + index);
    }
}
----
[[E4]]*4. Your DAO*
[source,java]
----
package com.reforms.example;

import com.reforms.orm.OrmDao;
import com.reforms.orm.dao.bobj.model.OrmIterator;

import java.sql.Connection;
import java.util.List;

public class ClientDao {

    // Reform api - dao
    private OrmDao ormDao;

    public ClientDao(Connection connection) {
        ormDao = new OrmDao(connection);
    }

    // Load all active clients
    private static final String SELECT_ACTIVE_CLIENTS_QUERY = "SELECT id, name, state FROM clients WHERE state = ?";

    public List<Client> loadActiveClients() throws Exception {
        return ormDao.selectList(Client.class, SELECT_ACTIVE_CLIENTS_QUERY, ClientState.ACTIVE);
    }

    // Load all clients
    private static final String SELECT_ALL_CLIENTS_QUERY = "SELECT id, name, state FROM clients";

    public OrmIterator<Client> loadClients() throws Exception {
        return ormDao.selectIterator(Client.class, SELECT_ALL_CLIENTS_QUERY);
    }

    public void processClients(ClientHandler clientHandler) throws Exception {
        ormDao.selectAndHandle(Client.class, SELECT_ALL_CLIENTS_QUERY, clientHandler);
    }

    // Find client using id
    private static final String FIND_CLIENT_QUERY = "SELECT id, name, state FROM clients WHERE id = ?";

    public Client findClient(long clientId) throws Exception {
        return ormDao.select(Client.class, FIND_CLIENT_QUERY, clientId);
    }

    // Update client name and state
    private static final String UPDATE_CLIENT_QUERY = "UPDATE clients SET name = ?, state = ? WHERE id = ?";

    public int updateClientNameAndState(long clientId, String clientName, ClientState clientState) throws Exception {
        return ormDao.update(UPDATE_CLIENT_QUERY, clientName, clientState, clientId);
    }

    // Delete client using id
    private static final String DELETE_CLIENT_QUERY = "DELETE FROM clients WHERE id = ?";

    public int deleteClient(long clientId) throws Exception {
        return ormDao.delete(DELETE_CLIENT_QUERY, clientId);
    }

    // Insert new client
    private static final String INSERT_CLIENT_QUERY = "INSERT INTO clients (id, name, state) VALUES(?, ?, ?)";

    public void saveClient(long clientId, String clientName, ClientState clientState) throws Exception {
        ormDao.insert(INSERT_CLIENT_QUERY, clientId, clientName, clientState);
    }

}
----